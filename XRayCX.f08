subroutine XRaySpectraCX(version,vAngle)
!*******************************************************************************
!* Created by Stephen J. Houston 1.16.18
!*******************************************************************************
!* This program takes the synthetic X-ray spectra produced by Hui et al. 2009
!* and generates X-ray spectra from an input oxygen or sulfur charge exchange
!* production file.
!*******************************************************************************

implicit real*8(a-h,o-z)

!**************************** Variable Declaration *****************************

integer OxyChS,SulChS,Alt,AtmosLen,Eng,E,XChS

parameter(nIter=3300) !Number of photon energy iterations 100-1000 keV

parameter(nOxyChS=10) !Number of oxygen charge states: q=-1,8 for oxygen
parameter(nSulChS=17) !Number of sulfur charge states: q=0,16 for sulfur
parameter(nXChS=9) !Number of O and S X-ray producing charge states
parameter(AtmosLen=1544) !Number of altitude bins
parameter(nMaxLines=1000) !Max number of lines in synthetic spectra files
parameter(pi=4.0*atan(1.0d0))

real*8,dimension(AtmosLen) :: Altitude!,cdH2,cdHe,cdCH4,cdH,cdTot !Atmosphere
real*8,dimension(1,nOxyChS,AtmosLen) :: OxyXRayProd !X-ray production
real*8,dimension(1,nSulChS,AtmosLen) :: SulXRayProd !X-ray production
real*8,allocatable,dimension(:,:) :: OxyXRaySpec !X-ray spectrum
real*8,allocatable,dimension(:,:) :: SulXRaySpec !X-ray spectrum
real*8,allocatable,dimension(:,:) :: SynthSpec !Normalized synthetic spectrum
real*8,allocatable,dimension(:,:,:) :: Gaussian !Gaussian for spectra
real*8,dimension(4,1,nIter,nXChS) :: GaussianTot !Total Gaussian

!* Opacity Effects
integer Ang
real*8 vAngle(3)
real*8,allocatable,dimension(:,:) :: OxyOpacXRaySpec !X-ray spectrum
real*8,allocatable,dimension(:,:) :: SulOpacXRaySpec !X-ray spectrum
! real*8,allocatable,dimension(:,:) :: SulXRaySpec !X-ray spectrum

character(len=100) :: filename,version

!****************************** Data Declaration *******************************
! data vAngle/0.0,60.0,80.0/
!**************************** Initialize Variables *****************************
Altitude=0.0;OxyXRayProd=0.0;GaussianTot=0.0
SulXRayProd=0.0
sig=20 !Variance for Gaussian distribution
!*************************** Read in the Atmosphere ****************************
open(unit=100,file='./Atmosphere/JupiterColumnDensity_2km.dat',status='old')
read(100,*) !Skip header lines
do Alt=1,AtmosLen !Read in the column density values
  read(100,*) Altitude(Alt)!,cdH2(Alt),cdHe(Alt),cdCH4(Alt),cdH(Alt),cdTot(Alt)
  !Altitude(1) is the top of the atmosphere, 2998.0 km; Altitude(1544)=-88.0 km
end do
close(100) !Close column density file
!*********************** Read in X-ray Production Files ************************
!* These files are generated by either JupOxyPrecip.f08 or JupSulPrecip.f08
!*** OXYGEN
Eng=1
write(filename,"('./Output/Oxy/',A,'/XRay_CX.dat')") trim(version)
open(unit=101,file=filename,status='old')
do i=1,12 !Skip the header of the file
  read(101,*)
end do
do Alt=1,AtmosLen
  read(101,1001) dum,(OxyXRayProd(Eng,OxyChS,Alt),OxyChS=1,nOxyChS)
end do
close(101)
!*** SULFUR
write(filename,"('./Output/Sul/',A,'/Photons_CX.dat')") trim(version)
open(unit=101,file=filename,status='old')
do i=1,12 !Skip the header of the file
  read(101,*)
end do
do Alt=1,AtmosLen
  read(101,1007) dum,(SulXRayProd(Eng,SulChS,Alt),SulChS=1,nSulChS)
end do
close(101)
!***************** Read in Normalized X-ray Production Files *******************
!*** OXYGEN
do OxyChS=6,7
  write(filename,"('./SyntheticSpectraTemplatesCX/O',I0,'.txt')") OxyChS
  open(unit=102,file=filename,status='old')
  read(102,*) !Skip header line
  nLines=0
  do i=1,nMaxLines
    read(102,*,end=5000) !Find the number of lines in the file
    nLines=nLines+1
  end do
5000 continue
  rewind(102)
  read(102,*) !Skip header line
  allocate(SynthSpec(2,nLines)) !Allocate to read in the file
  allocate(OxyXRaySpec(AtmosLen,nLines))
  allocate(OxyOpacXRaySpec(AtmosLen,nLines))
  allocate(Gaussian(4,nLines,nIter))
  do i=1,nLines
    read(102,1002) (SynthSpec(j,i),j=1,2) !1-Photon energy, 2-Intensity
  end do
  close(102)
!*** Calculate synthetic spectra from oxygen precipitation
  do Eng=1,1 !Loop through every initial oxygen ion energy
    do Alt=1,AtmosLen !Loop through the atmosphere
      do i=1,nLines !Loop through each photon energy
        OxyXRaySpec(Alt,i)=OxyXRayProd(Eng,OxyChS+2,Alt)*SynthSpec(2,i)
      end do !End photon energy do-loop
    end do !End atmosphere do-loop
    write(filename,"('./Output/XRay/',A,'/SpecVsAlt/Oxy_',I0,'_CX.dat')")&
          trim(version),OxyChS
    open(unit=103,file=filename)
    write(103,1010) 'Total Production Rate: ',sum(OxyXraySpec(:,:))*2e5
    write(103,*)
    write(103,1003) (SynthSpec(1,i),i=1,nLines)
    write(103,1004) 2.0,(sum(OxyXRaySpec(:,i))*2e5,i=1,nLines)
    write(103,*)
    write(103,1003) (SynthSpec(1,i),i=1,nLines)
    do Alt=1,AtmosLen
      write(103,1004) Altitude(Alt),(OxyXRaySpec(Alt,i),i=1,nLines)
    end do
    close(103)
    write(filename,"('./Output/XRay/',A,'/Points/Oxy_',I0,'_CX.dat')")&
          trim(version),OxyChS
    open(unit=106,file=filename)
    do i=1,nLines
      write(106,1006) SynthSpec(1,i),sum(OxyXRaySpec(:,i))*2e5
    end do
    close(106)
!*** Calculate opacity effects
    do Ang=1,4 !Loop through each viewing angle
      if(Ang.eq.4) goto 7000
      call XRayOpacity(OxyXRaySpec,SynthSpec,nLines,vAngle(Ang),OxyOpacXRaySpec)
      write(filename,"('./Output/XRay/',A,'/Points/',I0,'/Oxy_',I0,'_CX.dat')")&
            trim(version),int(vAngle(Ang)),OxyChS
      open(unit=106,file=filename)
      do i=1,nLines
        write(106,1006) SynthSpec(1,i),sum(OxyOpacXRaySpec(:,i))*2e5
      end do
      close(106)
!*** Calculate Gaussian distribution of line emissions
7000 continue
      if(Ang.le.3)then
        do i=1,nLines !Loop through each photon energy
          do E=1,nIter !Distribute the Gaussian from 100 eV - 1000 eV
            Gaussian(Ang,i,E)=((sum(OxyOpacXRaySpec(:,i))*2e5)/&
              sqrt(2*pi*sig**2))*exp(-(real(E+99)-SynthSpec(1,i))**2/(2*sig**2))
            if(Gaussian(Ang,i,E).lt.1e-20)Gaussian(Ang,i,E)=0.0
          end do
        end do
      else
        do i=1,nLines !Loop through each photon energy
          do E=1,nIter !Distribute the Gaussian from 100 eV - 1000 eV
            Gaussian(Ang,i,E)=((sum(OxyXRaySpec(:,i))*2e5)/sqrt(2*pi*sig**2))*&
              exp(-(real(E+99)-SynthSpec(1,i))**2/(2*sig**2))
            if(Gaussian(Ang,i,E).lt.1e-20)Gaussian(Ang,i,E)=0.0
          end do
        end do
      end if
!*** Add up all the Gaussian distribtuions, including opacity effects
      do E=1,nIter !GaussianTot(:,:,:,1-2)
        GaussianTot(Ang,Eng,E,OxyChS-5)=sum(Gaussian(Ang,:,E))
      end do
    end do !End viewing angle do-loop
  end do !End nOxyEnergies do loop
  deallocate(SynthSpec,OxyXRaySpec,OxyOpacXRaySpec,Gaussian)
end do !End nOxyChS do loop

!*** SULFUR
do SulChS=8,14
  write(filename,"('./SyntheticSpectraTemplatesCX/S',I0,'.txt')") SulChS
  open(unit=102,file=filename,status='old')
  read(102,*) !Skip header line
  nLines=0
  do i=1,nMaxLines
    read(102,*,end=6000) !Find the number of lines in the file
    nLines=nLines+1
  end do
6000 continue
  rewind(102)
  read(102,*) !Skip header line
  allocate(SynthSpec(2,nLines)) !Allocate to read in the file
  allocate(SulXRaySpec(AtmosLen,nLines))
  allocate(SulOpacXRaySpec(AtmosLen,nLines))
  allocate(Gaussian(4,nLines,nIter))
  do i=1,nLines
    read(102,1002) (SynthSpec(j,i),j=1,2) !1-Photon energy, 2-Intensity
  end do
  close(102)
!*** Calculate synthetic spectra from sulfur precipitation
  do Eng=1,1
    do Alt=1,AtmosLen !Loop through the atmosphere
      do i=1,nLines !Loop through each photon energy
        SulXRaySpec(Alt,i)=SulXRayProd(Eng,SulChS+1,Alt)*SynthSpec(2,i)
      end do
    end do
    write(filename,"('./Output/XRay/',A,'/SpecVsAlt/Sul_',I0,'_CX.dat')")&
          trim(version),SulChS
    open(unit=103,file=filename)
    write(103,1010) 'Total Production Rate: ',sum(SulXraySpec(:,:))*2e5
    write(103,*)
    write(103,1003) (SynthSpec(1,i),i=1,nLines)
    write(103,1004) 2.0,(sum(SulXRaySpec(:,i))*2e5,i=1,nLines)
    write(103,*)
    write(103,1003) (SynthSpec(1,i),i=1,nLines)
    do Alt=1,AtmosLen
      write(103,1004) Altitude(Alt),(SulXRaySpec(Alt,i),i=1,nLines)
    end do
    close(103)
    write(filename,"('./Output/XRay/',A,'/Points/Sul_',I0,'_CX.dat')")&
          trim(version),SulChS
    open(unit=106,file=filename)
    do i=1,nLines
      write(106,1006) SynthSpec(1,i),sum(SulXRaySpec(:,i))*2e5
    end do
    close(106)
!*** Calculate opacity effects
    do Ang=1,4 !Loop through each viewing angle
      if(Ang.eq.4) goto 8000
      call XRayOpacity(SulXRaySpec,SynthSpec,nLines,vAngle(Ang),SulOpacXRaySpec)
      write(filename,"('./Output/XRay/',A,'/Points/',I0,'/Sul_',I0,'_CX.dat')")&
            trim(version),int(vAngle(Ang)),SulChS
      open(unit=106,file=filename)
      do i=1,nLines
        write(106,1006) SynthSpec(1,i),sum(SulOpacXRaySpec(:,i))*2e5
      end do
      close(106)
!*** Calculate Gaussian distribution of line emissions
8000 continue
      if(Ang.le.3)then
        do i=1,nLines !Loop through each photon energy
          do E=1,nIter !Distribute the Gaussian from 100 eV - 1000 eV
            Gaussian(Ang,i,E)=((sum(SulOpacXRaySpec(:,i))*2e5)/&
              sqrt(2*pi*sig**2))*exp(-(real(E+99)-SynthSpec(1,i))**2/(2*sig**2))
            if(Gaussian(Ang,i,E).lt.1e-20)Gaussian(Ang,i,E)=0.0
          end do
        end do
      else
        do i=1,nLines !Loop through each photon energy
          do E=1,nIter !Distribute the Gaussian from 100 eV - 1000 eV
            Gaussian(Ang,i,E)=((sum(SulXRaySpec(:,i))*2e5)/sqrt(2*pi*sig**2))*&
              exp(-(real(E+99)-SynthSpec(1,i))**2/(2*sig**2))
            if(Gaussian(Ang,i,E).lt.1e-20)Gaussian(Ang,i,E)=0.0
          end do
        end do
      end if
!*** Add up all the Gaussian distribtuions, including opacity effects
      do E=1,nIter !GaussianTot(:,:,:,3-9)
        GaussianTot(Ang,Eng,E,SulChS-5)=sum(Gaussian(Ang,:,E))
      end do
    end do !End viewing angle do-loop
  end do !End nOxyEnergies do loop
  deallocate(SynthSpec,SulXRaySpec,SulOpacXRaySpec,Gaussian)
end do !End nOxyChS do loop

do Ang=1,4
  do Eng=1,1
    if(Ang.le.3)then
      write(filename,"('./Output/XRay/',A,'/Spectra/',I0,&
                     '_deg/O+S_Total_CX.dat')") trim(version),nint(vAngle(Ang))
    else
      write(filename,"('./Output/XRay/',A,&
                     '/Spectra/No_Opacity/O+S_Total_CX.dat')") trim(version)
    end if
    open(unit=105,file=filename)
    write(105,1011) 'Total Production Rate:'
    write(105,1012) sum(GaussianTot(Ang,Eng,:,:)),&
    sum(GaussianTot(Ang,Eng,:,1:2)),(sum(GaussianTot(Ang,Eng,:,XChS)),XChS=1,2),&
    sum(GaussianTot(Ang,Eng,:,3:9)),(sum(GaussianTot(Ang,Eng,:,XChS)),XChS=3,9)
    write(105,*)
    write(105,1009) 'Phot Eng [eV]','Total','O_Total','O6','O7','S_Total','S8',&
                    'S9','S10','S11','S12','S13','S14'
    do E=1,nIter
      write(105,1008) real(E+99),sum(GaussianTot(Ang,Eng,E,:)),&
      sum(GaussianTot(Ang,Eng,E,1:2)),(GaussianTot(Ang,Eng,E,XChS),XChS=1,2),&
      sum(GaussianTot(Ang,Eng,E,3:9)),(GaussianTot(Ang,Eng,E,XChS),XChS=3,9)
    end do
    close(105)
  end do
end do

1001 format(1x,F8.2,10(2x,ES9.2E2))
1002 format(4x,F8.3,29x,ES9.3E2)
1003 format(8x,50(3x,F7.3))
1004 format(1x,F8.2,50(1x,ES9.3E2))
1005 format(1x,F8.2,2x,ES9.3E2)
1006 format(1x,F8.3,2x,ES9.3E2)
1007 format(2x,F7.2,17(2x,ES8.2E2))
1008 format(2x,F8.2,4x,12(2x,ES9.3E2))
1009 format(1x,A13,12(2x,A9))
1010 format(1x,A23,1x,ES9.3E2)
1011 format(1x,A22)
1012 format(14x,12(2x,ES9.3E2))

end subroutine
